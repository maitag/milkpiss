package de.peote.world;

import de.peote.events.PeoteTimeslicer;
import de.peote.world.room.Room;

import de.peote.world.actor.Stone;
import de.peote.world.item.controller.Controller;

import de.peote.world.item.I_Item;
import de.peote.world.item.Item;
import de.peote.world.actor.I_Actor;
import de.peote.world.actor.Actor;

import de.peote.world.item.viewer.I_Viewer;
import de.peote.world.item.viewer.Viewer;
import de.peote.world.net.Server;

import de.peote.world.Event.RoomEvent;

/**
 * ...
 * @author semmi
 */

class World 
{
	public var viewer:I_Viewer;	
	public var controller:Controller;
		
	public static var timeslicer:PeoteTimeslicer<Dynamic>;
		
	public function new() 
	{
		timeslicer = new PeoteTimeslicer(60,10);
		// TODO: mehrere timeslicer durchschalten ?
	}
	
	public function delete():Void
	{
		// TODO: rekursiv alles durchgehen, beim viewer angefangen
		// nach innen und aussen und in alle 4 Richtungen jeweils
		// -> dadurch nix dem Garbagecollector ueberlassen!
	}
	
	public inline function start():Void
	{
		timeslicer.start();
	}
	
	public inline function stop():Void
	{
		timeslicer.stop();
	}
	
	public function step()
	{	
		timeslicer.step();
	}
	
	
	public function createExampleWorld(lvlNr:Int):Array<I_WorldObject> {
		var level:Array<Array<Int>> = testLevel(lvlNr);
		var zuordnung:Array<String> = [
			"Tunnel",	// 0
			"Erde",		// 1
			"Stein",	// 2
			"Mauer",	// 3
			"LocalClient",	// 4
			"NetClient",	// 5
		];
		
		var available_actors:Array<I_WorldObject> = new Array();
		
		var world_width:Int = level[0].length;
		var world_height:Int = level.length;
		
		var room:Room;
		var last_room:Room = null;
		var last_row:Array<Room> = new Array<Room>();
		
		//enden verbinden
		var ganzLinker:Room = null;
		var ganzOben:Array<Room> = new Array<Room>();
		
		for (j in 0 ... level.length)
		{
			for (i in 0 ... level[j].length)
			{
				// room erstellen und mit inhalt fuellen
				room = new Room(0);
				
				if (zuordnung[level[j][i]] == "Stein")
				{	
					room.content = new Stone(level[j][i]);
					room.sendTimeEvent( RoomEvent.ENTER, { "from":room, "to":room, "obj":room.content } , 0 );
				}
				else if (zuordnung[level[j][i]] == "NetClient") // gucken ob Viewer
				{
					room.content = new Actor(level[j][i]);
					available_actors.push(room.content);
					//cast(room.content, I_Akteur).canFall = true;
					
				}
				else if (zuordnung[level[j][i]] != "Tunnel") room.content = new Actor(level[j][i]);
				
				
				// FOLDING -------------------------
				
				// connect horizontal
				if (i > 0)
				{
					room.connectLeft(last_room);
				}
				else // connect leaves
				{	ganzLinker = room;
				}
				if (i == level[j].length-1) room.connectRight(ganzLinker);
				
				
				// connect vertically
				if (j > 0)
				{
					room.connectTop(last_row[i]);
				}
				else // connect leaves
				{
					ganzOben[i] = room;
				}
				if (j == level.length-1) room.connectBottom(ganzOben[i]);
				
				
				last_room = room;
				last_row[i] = room;

			}
			
		}
		
		return(available_actors);
	}
	
	// -----------------------------------------------------------------------------------
	// ---------------------------   TESTDATA   ------------------------------------------
	// -----------------------------------------------------------------------------------
	
	public function testLevel(lvlNr:Int):Array<Array<Int>> {
		if (lvlNr == 0)
		{
			return	[
			[3,3,0,0,0,3,3],
			[3,1,2,0,0,1,3],
			[1,3,0,0,0,1,3],
			[0,1,0,5,0,0,0],
			[3,3,1,0,5,0,3],
			[3,3,0,0,0,0,3],
			[3,3,0,0,0,3,3],
			];
		}
		else if (lvlNr == 1)
		{
			return	[
			[3,3,3,3,3,0,0,3,0,0,0,1,0,3,0,0,0,3,3],
			[3,3,3,3,3,0,0,3,0,0,0,1,0,3,0,0,2,3,3],
			[3,3,3,3,3,0,0,3,0,0,5,1,0,3,2,2,2,3,3],
			[3,3,3,3,3,3,2,0,3,0,0,0,3,0,0,3,3,3,3],
			[3,3,3,3,3,3,0,0,1,0,0,0,0,0,0,0,0,3,3],
			[3,3,3,3,3,3,0,0,0,1,0,0,0,0,2,3,0,3,3],
			[3,3,3,3,3,0,0,3,0,0,1,0,0,1,0,0,0,3,3],
			[3,3,3,3,3,0,0,0,0,0,0,0,3,0,0,0,3,3,3],
			[3,3,3,3,3,0,0,0,5,5,5,0,0,0,0,0,0,3,0],
			[3,3,3,3,3,0,3,0,0,0,0,0,0,0,5,3,0,3,3],
			[3,3,3,3,3,5,3,0,0,2,0,0,3,0,0,0,0,3,3],
			[3,3,3,3,3,0,0,0,0,0,1,0,1,0,0,0,3,3,3],
			[3,3,3,3,3,0,0,0,3,0,0,0,0,0,2,0,0,3,3],
			[3,3,3,3,5,0,3,0,3,0,0,1,1,0,3,0,0,3,3],
			[3,3,3,3,3,0,3,0,3,3,3,1,0,0,0,0,0,3,3],
			[3,3,3,3,3,0,0,0,3,0,0,1,0,3,3,0,0,3,3],
			[3,3,3,3,3,0,0,3,0,0,0,1,0,3,0,0,0,3,3],
			];
		}
		else if (lvlNr == 2)
		{
			return	[
			[3,3,3,3,3,0,0,3,0,0,2,1,0,3,0,0,0,3,3],
			[3,3,3,3,3,0,0,3,0,0,2,1,0,3,0,0,0,3,3],
			[3,3,3,3,3,0,0,3,0,0,2,1,0,3,0,0,0,3,3],
			[3,3,3,3,3,3,0,0,3,2,2,2,3,2,0,3,3,3,3],
			[3,3,3,3,3,3,0,2,1,2,2,2,2,2,0,0,2,3,3],
			[3,3,3,3,3,3,0,0,0,1,2,2,2,2,0,3,0,3,3],
			[3,3,3,3,3,0,2,3,0,0,1,0,0,1,0,0,0,3,3],
			[3,3,3,3,3,0,0,0,0,0,0,0,3,0,0,0,3,3,3],
			[3,3,3,3,3,0,0,0,5,5,5,0,0,0,0,0,0,3,0],
			[3,3,3,3,3,0,3,0,0,0,0,0,0,0,0,3,2,3,3],
			[3,3,3,3,3,2,3,0,0,0,0,0,3,0,0,0,0,3,3],
			[3,3,3,3,3,0,0,0,0,2,1,0,1,0,0,0,3,3,3],
			[3,3,3,3,3,2,0,0,3,2,2,0,0,0,0,0,0,3,3],
			[3,3,3,3,3,2,3,0,3,2,2,1,1,0,3,0,0,3,3],
			[3,3,3,3,3,0,3,2,3,3,3,1,0,0,0,0,0,3,3],
			[3,3,3,3,3,0,0,0,3,2,0,1,0,3,3,0,0,3,3],
			[3,3,3,3,3,0,0,3,0,0,2,1,0,3,0,0,0,3,3],
			];
		}
		else if(lvlNr == 3)
		{
			return	[
			[1,1,1,1,1,2,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,1,1,1,2,2,2,2,2,2,2,2,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,1,1,1,2,2,2,2,2,2,2,2,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,2,2,1,2,2,2,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,2,2,1,2,2,2,1,1],
			[1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,1,2,2,2,1,1],
			[1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,2,2,1,2,2,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,2,2,1,2,2,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,2,2,1,1,2,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1],
			[1,1,1,1,2,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1],
			[1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1],
			[1,1,1,2,2,2,1,1,1,1,1,1,2,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1],
			[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
			[3,3,3,3,3,1,3,3,3,3,3,3,1,1,1,3,3,3,0,3,3,3,1,1,1,3,3,1,3,3,3,3,3,0,0,0,0,0,3,3,3],
			[3,1,2,2,2,2,2,2,2,0,1,1,1,1,1,2,5,0,0,0,1,1,1,1,1,2,1,1,0,0,0,0,1,2,0,2,0,0,0,1,3],
			[3,1,2,2,2,2,2,2,2,3,1,3,1,1,1,0,0,0,0,1,3,5,1,1,2,5,1,1,0,1,1,1,1,2,0,2,0,1,1,1,3],
			[3,1,2,2,2,2,3,0,0,2,1,3,1,1,0,0,0,0,0,0,3,1,1,0,2,2,1,1,0,0,0,0,1,2,0,1,0,0,1,1,3],
			[3,0,0,0,0,0,0,0,5,0,1,0,1,1,5,0,1,3,0,0,0,1,1,1,2,1,1,1,5,0,1,1,1,2,0,1,0,0,0,1,3],
			[3,1,3,2,2,0,0,3,0,0,1,0,0,1,0,2,2,0,0,0,0,0,1,1,2,2,1,1,0,0,0,2,1,1,0,1,0,0,0,1,3],
			[3,1,2,3,0,0,3,1,1,0,0,0,0,0,0,2,1,1,0,0,0,0,1,1,1,1,2,2,0,2,0,0,1,1,2,2,0,2,1,1,3],
			[3,1,1,3,0,0,3,3,2,0,2,0,0,0,0,2,2,2,0,2,0,0,1,1,2,2,1,1,0,2,0,0,1,2,1,0,0,2,1,1,3],
			[3,1,1,3,2,0,0,1,0,0,2,3,1,0,0,2,1,0,0,2,0,1,1,1,2,1,1,1,0,1,0,2,2,2,1,0,0,1,1,1,3],
			[3,2,1,1,3,0,1,1,0,0,2,2,0,0,0,3,3,0,0,2,0,0,0,0,3,3,3,1,0,0,0,0,1,2,3,0,0,0,1,1,3],
			[3,1,1,1,1,3,1,0,0,0,1,3,1,0,0,2,2,0,0,1,0,0,1,1,1,1,1,1,0,0,0,0,2,1,1,1,0,0,0,1,3],
			[3,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,2,1,3,1,0,1,2,2,1,1,0,0,0,2,1,2,1,1,0,0,0,1,3],
			[3,2,3,3,1,1,1,0,0,2,1,1,0,0,0,0,0,0,2,1,1,1,0,1,1,2,1,1,1,1,1,1,1,3,1,1,1,0,0,1,3],
			[3,1,1,0,1,1,3,2,0,1,2,3,0,0,0,0,0,0,1,2,3,1,0,1,2,2,1,1,1,0,0,0,1,3,1,1,1,0,1,1,3],
			];
		}
		else
		{
			return	[];

		}
	}

}